sudo: false
dist: xenial
language: generic

services:
  - mongodb

stages:
  - build
  - tag

env:
  - PRIVATE_IMAGE="$REGISTRY/registry-server" \
    IMAGE="$REGISTRY/registry-server" \
    IMAGE_TAG="$PRIVATE_IMAGE:$TRAVIS_COMMIT" \
    IMAGE_TAG_DEVELOP="$IMAGE:develop" \
    IMAGE_TAG_LATEST="$IMAGE:latest"

cache:
  timeout: 600
  directories:
  - $HOME/.stack
  - $HOME/.stack-work
  - .stack-work

install:
  # 1. Download, unpack, and check the stack executable
  - mkdir -p ~/.local/bin
  - export PATH=$HOME/.local/bin:$PATH
  - travis_retry curl -L https://github.com/commercialhaskell/stack/releases/download/v2.1.3/stack-2.1.3-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  # 2. Init Application Config
  - cp config/application.yml.example config/application.yml
  - cp config/application-test.yml.example config/application-test.yml

before_script:
  # 1. Log to private Docker Registry
  - docker login -u "$REGISTRY_USERNAME" -p "$REGISTRY_PASSWORD" "$REGISTRY"

jobs:
  include:
    - stage: build
      script:
        # 1. Init and check testing Mongo Database
        - mongo registry-server-test --eval 'db.collection.find()'
        # 2. Create build info inside application
        - cd scripts
        - ./build-info.sh
        - cd ..
        # 3. Build and Test Application
        - stack build --no-terminal --skip-ghc-check --test
        # 4. Build Docker Image
        - docker pull $IMAGE_TAG_DEVELOP
        - docker build --cache-from $IMAGE_TAG_DEVELOP -t $IMAGE_TAG .
        - docker push $IMAGE_TAG

    - stage: tag
      if: (branch = develop) AND (NOT (type IN (pull_request)))
      addons: false
      services: false
      cache: false
      before_install: false
      install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_DEVELOP
        - docker push $IMAGE_TAG_DEVELOP

    - stage: tag
      if: (branch = master) AND (NOT (type IN (pull_request)))
      addons: false
      services: false
      cache: false
      before_install: false
      install: false
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_LATEST
        - docker push $IMAGE_TAG_LATEST

    - stage: tag
      if: (tag =~ ^v\d+\.\d+\.\d+$)
      install: false
      env:
        - PRIVATE_IMAGE="$REGISTRY/registry-server"
        - IMAGE="$REGISTRY/registry-server"
        - IMAGE_TAG="$PRIVATE_IMAGE:$TRAVIS_COMMIT"
        - IMAGE_TAG_MAJOR="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
        - IMAGE_TAG_MINOR="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v(.*)\..*/\1/g"`
        - IMAGE_TAG_PATCH="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v//g"`
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_MAJOR
        - docker push $IMAGE_TAG_MAJOR
        - docker image tag $IMAGE_TAG $IMAGE_TAG_MINOR
        - docker push $IMAGE_TAG_MINOR
        - docker image tag $IMAGE_TAG $IMAGE_TAG_PATCH
        - docker push $IMAGE_TAG_PATCH

    - stage: tag
      if: (tag =~ ^v\d+\.\d+\.\d+-rc\.\d+$)
      install: false
      env:
        - PRIVATE_IMAGE="$REGISTRY/registry-server"
        - IMAGE="$REGISTRY/registry-server"
        - IMAGE_TAG="$PRIVATE_IMAGE:$TRAVIS_COMMIT"
        - IMAGE_TAG_RC="$IMAGE:"`echo $TRAVIS_TAG | sed -E "s/v//g"`
      script:
        - docker pull $IMAGE_TAG
        - docker image tag $IMAGE_TAG $IMAGE_TAG_RC
        - docker push $IMAGE_TAG_RC
